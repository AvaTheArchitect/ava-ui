'use client';

import React, { useState, useRef, useEffect } from 'react';

// üß† TestGuitarComponent - Enhanced by Dual Brain with NEW FEATURES with NEW FEATURES
// Generated from starter specification

interface TestGuitarComponentProps {
  className?: string;
  onAction?: (action: string) => void;
}

/**
 * üé∏ TestGuitarComponent - ENHANCED with new features
 * Original: Generated from starter template
 * Updates: Template fix verification, Confirm all systems working
 */
export const TestGuitarComponent: React.FC<TestGuitarComponentProps> = ({
  className = "",
  onAction
}) => {
  const [isActive, setIsActive] = useState(false);
  const [chordProgression, setChordProgression] = useState<string[]>(['C', 'G', 'Am', 'F']);
  const [metronomeActive, setMetronomeActive] = useState(false);
  const [practiceProgress, setPracticeProgress] = useState(0);
  const [currentChord, setCurrentChord] = useState(0);
  const [status, setStatus] = useState<'idle' | 'ready' | 'practicing'>('idle');
  const componentRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Initialize TestGuitarComponent
    console.log('TestGuitarComponent initialized');
    setStatus('ready');
  }, []);

  const handleStart = () => {
    setIsActive(true);
    setStatus('practicing');
    onAction?.('start');
  };

  const handleStop = () => {
    setIsActive(false);
    setStatus('ready');
    onAction?.('stop');
  };




  const handleChordProgression = () => {
    const nextChord = (currentChord + 1) % chordProgression.length;
    setCurrentChord(nextChord);
    console.log(`Playing chord: ${chordProgression[nextChord]}`);
    onAction?.(`chord-${chordProgression[nextChord]}`);
  };

  const generateNewProgression = () => {
    const chords = ['C', 'G', 'Am', 'F', 'Dm', 'Em', 'A', 'D'];
    const newProgression = Array.from({ length: 4 }, () =>
      chords[Math.floor(Math.random() * chords.length)]
    );
    setChordProgression(newProgression);
    setCurrentChord(0);
  };

  const toggleMetronome = () => {
    setMetronomeActive(!metronomeActive);
    console.log(`Metronome: ${!metronomeActive ? 'ON' : 'OFF'}`);
    onAction?.(`metronome-${!metronomeActive ? 'on' : 'off'}`);
  };

  const updateProgress = () => {
    const newProgress = Math.min(practiceProgress + 10, 100);
    setPracticeProgress(newProgress);
    console.log(`Progress: ${newProgress}%`);
  };

  return (
    <div
      ref={componentRef}
      className={`test-component ${className}`}
      data-testid="testguitarcomponent"
    >
      <div className="component-header">
        <h2>üé∏ TestGuitarComponent</h2>
        <span className={`status status-${status}`}>
          Status: {status}
        </span>
      </div>

      <div className="component-content">
        <div className="controls">
          {!isActive ? (
            <button
              onClick={handleStart}
              className="btn-start"
              type="button"
            >
              ‚ñ∂Ô∏è Start TestGuitarComponent
            </button>
          ) : (
            <button
              onClick={handleStop}
              className="btn-stop"
              type="button"
            >
              ‚èπÔ∏è Stop TestGuitarComponent
            </button>
          )}


          <div className="chord-controls">
            <h4>üé∏ Chord Progression</h4>
            <div className="chord-display">
              {chordProgression.map((chord, index) => (
                <span
                  key={index}
                  className={`chord ${index === currentChord ? 'active' : ''}`}
                >
                  {chord}
                </span>
              ))}
            </div>
            <div className="chord-buttons">
              <button onClick={handleChordProgression} className="btn-chord">
                ‚ñ∂Ô∏è Next Chord
              </button>
              <button onClick={generateNewProgression} className="btn-chord">
                üîÑ New Progression
              </button>
            </div>
          </div>

          <div className="metronome-controls">
            <h4>ü•Å Metronome</h4>
            <button
              onClick={toggleMetronome}
              className={`btn-metronome ${metronomeActive ? 'active' : ''}`}
            >
              {metronomeActive ? '‚è∏Ô∏è Stop' : '‚ñ∂Ô∏è Start'} Metronome
            </button>
          </div>

          <div className="progress-tracking">
            <h4>üìä Progress</h4>
            <div className="progress-bar">
              <div
                className="progress-fill"
                style={{ width: `${practiceProgress}%` }}
              ></div>
            </div>
            <p>{practiceProgress}% Complete</p>
            <button onClick={updateProgress} className="btn-progress">
              +10% Progress
            </button>
          </div>
        </div>

        <div className="display">
          {isActive ? (
            <div className="active-display">
              <p>üéµ TestGuitarComponent is now active!</p>
              <div className="practice-info">
                <p>Practice session in progress...</p>
              </div>
            </div>
          ) : (
            <div className="idle-display">
              <p>Ready to start TestGuitarComponent</p>
              <p>Click the start button to begin your practice session.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TestGuitarComponent;