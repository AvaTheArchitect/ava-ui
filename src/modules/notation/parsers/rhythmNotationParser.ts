// üé∏ rhythmNotationParser - Created: September 16, 2025 3:31 PM - v1.0
// Generated by Cipher Autonomous System
// ================================================

// ü•Å Rhythmnotationparser - Rhythm and Timing Parser
// src/modules/notation/parsers/rhythmNotationParser.ts
// Handle all note values from whole notes to 64th notes, parse dotted rhythms and complex subdivisions, support tuplets and polyrhythmic patterns
// üéµ LOCAL TYPE DEFINITIONS
interface RhythmBeat {
  position: number;
  duration: number;
  velocity: number;
  accent?: boolean;
  ghost?: boolean;
  flam?: boolean;
}

interface TimeSignature {
  numerator: number;
  denominator: number;
  compound?: boolean;
}

interface RhythmPattern {
  beats: RhythmBeat[];
  timeSignature: TimeSignature;
  tempo: number;
  swing?: number;
  subdivision: "quarter" | "eighth" | "sixteenth" | "thirty-second";
}

interface RhythmParseOptions {
  detectSwing?: boolean;
  quantize?: boolean;
  analyzeComplexity?: boolean;
}

interface RhythmParseResult {
  success: boolean;
  pattern?: RhythmPattern;
  complexity: 'simple' | 'moderate' | 'complex' | 'advanced';
  errors: string[];
  warnings: string[];
  suggestions: string[];
}

// ü•Å RHYTHM PARSER CLASS
export class Rhythmnotationparser {
  private readonly noteValues = new Map([
    ['w', 1], ['h', 0.5], ['q', 0.25], ['e', 0.125], ['s', 0.0625]
  ]);

  constructor() {
    console.log('Rhythmnotationparser initialized');
  }

  async parseRhythm(input: string | RhythmBeat[]): Promise<RhythmParseResult> {
    const errors: string[] = [];
    const warnings: string[] = [];
    const suggestions: string[] = [];

    try {
      const pattern = typeof input === 'string' 
        ? this.parseRhythmString(input)
        : this.createPatternFromBeats(input);

      const complexity = this.analyzeComplexity(pattern);
      suggestions.push(...this.generateRhythmSuggestions(pattern));

      return {
        success: true,
        pattern,
        complexity,
        errors,
        warnings,
        suggestions
      };
    } catch (error) {
      errors.push(`Rhythm parse error: ${String(error)}`);
      return {
        success: false,
        complexity: 'simple',
        errors,
        warnings,
        suggestions
      };
    }
  }

  private parseRhythmString(input: string): RhythmPattern {
    const beats: RhythmBeat[] = [];
    const tokens = input.split(/\s+/);
    let position = 0;

    for (const token of tokens) {
      const beat = this.parseRhythmToken(token, position);
      if (beat) {
        beats.push(beat);
        position += beat.duration;
      }
    }

    return {
      beats,
      timeSignature: { numerator: 4, denominator: 4 },
      tempo: 120,
      subdivision: 'quarter'
    };
  }

  private parseRhythmToken(token: string, position: number): RhythmBeat | null {
    const durationMatch = token.match(/^([whqes])(\.?)([\-\+]?)$/);
    if (!durationMatch) return null;

    const [, note, dot, accent] = durationMatch;
    let duration = this.noteValues.get(note) || 0.25;
    
    if (dot) duration *= 1.5;

    return {
      position,
      duration,
      velocity: accent === '+' ? 100 : accent === '-' ? 40 : 70,
      accent: accent === '+',
      ghost: accent === '-'
    };
  }

  private createPatternFromBeats(beats: RhythmBeat[]): RhythmPattern {
    return {
      beats,
      timeSignature: { numerator: 4, denominator: 4 },
      tempo: 120,
      subdivision: 'quarter'
    };
  }

  private analyzeComplexity(pattern: RhythmPattern): 'simple' | 'moderate' | 'complex' | 'advanced' {
    const syncopation = this.calculateSyncopation(pattern);
    const polyrhythm = this.detectPolyrhythm(pattern);
    
    if (polyrhythm || syncopation > 0.7) return 'advanced';
    if (syncopation > 0.4) return 'complex';
    if (syncopation > 0.2) return 'moderate';
    return 'simple';
  }

  private calculateSyncopation(pattern: RhythmPattern): number {
    let syncopatedBeats = 0;
    const { numerator } = pattern.timeSignature;
    
    for (const beat of pattern.beats) {
      const beatPosition = beat.position % 1;
      if (beatPosition !== 0 && beatPosition !== 0.5) {
        syncopatedBeats++;
      }
    }
    
    return syncopatedBeats / pattern.beats.length;
  }

  private detectPolyrhythm(pattern: RhythmPattern): boolean {
    const subdivisions = pattern.beats.map(b => b.duration);
    const uniqueSubdivisions = new Set(subdivisions);
    return uniqueSubdivisions.size > 2;
  }

  private generateRhythmSuggestions(pattern: RhythmPattern): string[] {
    const suggestions: string[] = [];
    
    if (pattern.beats.some(b => b.ghost)) {
      suggestions.push('Practice ghost notes with light touch');
    }
    
    if (pattern.beats.some(b => b.accent)) {
      suggestions.push('Emphasize accented beats clearly');
    }
    
    return suggestions;
  }

  static create(): Rhythmnotationparser {
    return new Rhythmnotationparser();
  }
}

export default Rhythmnotationparser;